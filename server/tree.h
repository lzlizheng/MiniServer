//===========================================================================
// 功能：采用二叉排序树的数据结构，对lib库中存储的函数进行登记，并管理
//
// 对应cpp文件：
//		（1）Lib文件操作		 - readlib.cpp
//		（2）二叉排序树 基本操作 - tree.cpp
//
// 时间：2016年9月27日18:15:42
// 作者：李筝
//===========================================================================

#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string>
#include<vector>
#include"CommenUtil.h"

using namespace std;


//============================================================
//功能：
//	描述客户端传来的参数数组的类
//============================================================
#define BUFLEN 1024
#define MAXSIZE 64


//===========================================================
//二叉排序树存储函数信息的节点
//===========================================================
typedef struct FuncBlock{
	//函数名
	char sFuncName[255];
	//函数头在LIB文件中的偏移位置
	int iBeginPos;
	//函数尾在LIB文件中的偏移位置
	int iEndPos;
}sFuncBlock;

typedef struct node{
	sFuncBlock * funcBlock;
	struct node *lchild, *rchild;
}* pTree;


//==================================================================
//Lib文件操作
//==================================================================

//-----------------------------------------------------------
// Summary:
//	将指定的Lib文件中的信息存储到存放函数信息结构体的容器中
// parameter：
//	[in] sFileName - Lib文件路径
//	[out] vFuncVec - 存储函数信息结构体的容器
// return:
//	成功返回true，失败返回false
//------------------------------------------------------------
bool LibInfotoVec(string sLibPath, vector<sFuncBlock> & vFuncVec);


//-------------------------------------------------------------
// Summary:
//	将存储Lib文件中函数信息的结构体存入二叉排序树中
// parameter:
//	[in] vFuncVec - 存储结构体的容器
//	[in] root - 二叉排序树根结点
// return:
//	成功返回true，失败返回false
//-------------------------------------------------------------
bool VectoTree(vector<sFuncBlock> & vFuncVec, pTree & root);


//--------------------------------------------------------------
// Summary:	
//	根据函数名，在二叉排序树中寻找目标函数，获取其在库文件中的偏移量
//并将函数内容写到一个临时文件中，进行调用。
// parameter:
//	[in] root - 二叉排序树根结点
//	[in] funcname - 被调用函数名
//	[in] paralist - 参数数组对象
//	[out] returntype - 返回值类型
//	[out] returnlenth - 返回值长度
//	[out] returnvalue - 返回值字符串内容
// return:
//	成功返回true，失败返回false
//--------------------------------------------------------------
bool callfunc(pTree root, char funcname[255], vector<sPara> paralist,  char & returntype, long & returnlenth, char * returnvalue);




//=================================================================
//二叉排序树 基本操作
//=================================================================

//--------------------------------------------------------
//功能：
//	中序遍历树
//参数：
//	[in] root - 要遍历的树
//--------------------------------------------------------
void InOrderTraverse(pTree root);


//--------------------------------------------------------
//功能：
//	先序遍历树
//参数：
//	[in] root - 要遍历的树
//--------------------------------------------------------
void PreOrderTraverse(pTree root);


//--------------------------------------------------------
//功能：
//	后序遍历树
//参数：
//	[in] root - 要遍历的树
//--------------------------------------------------------
void PostOrderTraverse(pTree root);

//--------------------------------------------------------
//功能：
//	在根指针root所指向的二叉排序树中递归查找其关键字等于
//	data的数据元素
//参数：
//	[in]root - 要查找的树的树根
//	[in]data - 要查找的函数名
//	[in]f - 指向查找路径上的最后一个节点
//	[out]p - 查找成功的情况下，指向找到的元素节点
//						失败的情况下，指向查找路径上的最后一个节点
//返回值：
//	查找成功返回true，失败返回false
//--------------------------------------------------------
bool SearchBST(pTree root,char * data,pTree f,pTree& p);


//---------------------------------------------------------
//功能：
//	将数据data插入树root中
//参数：
//	[in] root - 数据pFuncBlock将要存入到的树
//	[in] pFuncBlock - 指向被插结构体的指针
//--------------------------------------------------------
void InsertBST(pTree& root,sFuncBlock * pFuncBlock);

//--------------------------------------------------------
//功能：
//	释放树所使用的内存空间
//参数：
//	[in] root - 要被销毁的树
//--------------------------------------------------------
void DeleteBST(pTree root);
